{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContaner.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","purple","navi","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","useEffect","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","match","params","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","SytledInput","input","Footer","ButtonWidthMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","conCancel","postId","a","delete","ownPost","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8fceafc.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto; /*중앙 정렬*/\r\n\r\n    /*브라우저 크기에 따라 가로 크기 변경*/\r\n    @media (max-width: 1024px){\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 768px){\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Responsive = ({children, ...rest}) => {\r\n    //style, className, onClick, onmouseMove 등의 props를 사용할 수 있도록 \r\n    //..rest를 사용하여 ResponsiveBlock에게 전달\r\n    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>\r\n}\r\n\r\nexport default Responsive;","//source: https://yeun.github.io/open-color/\r\n//색상을 사용할 때 여기서 뽑아 쓰면 됨!\r\nconst palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#9b7285',\r\n    ],\r\n    purple: [\r\n        '#8775b3',\r\n        '#8750a1',\r\n    ],\r\n    navi: [\r\n        '#272056',\r\n        '#9f88d8',\r\n    ],\r\n};\r\n\r\nexport default palette;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css `\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n    \r\n    background: ${palette.gray[8]};\r\n    &:hover{\r\n        background: ${palette.gray[6]};\r\n    }\r\n    \r\n    ${props => \r\n    props.fullWidth &&\r\n    css`\r\n        padding-top: 0.75rem;\r\n        padding-bottom:0.75rem;\r\n        width: 100%;\r\n        font-size: 1.125rem;\r\n    `}\r\n\r\n    ${props => \r\n        props.cyan &&\r\n        css`\r\n        background: ${palette.cyan[5]};\r\n        &:hover{\r\n            background: ${palette.cyan[4]};\r\n        }\r\n    `}\r\n\r\n    &: disabled{\r\n        background: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    ${buttonStyle}\r\n`;\r\n\r\nconst Button = props =>{\r\n    return props.to ? (\r\n       <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n    ):(\r\n        <StyledButton {...props}/>\r\n    );\r\n};\r\n    \r\nexport default Button;\r\n//굳이 리엑트 컴포넌트를 만들어서 StyledButton을 렌더링한 이유: \r\n//이 컴포넌트를 사용할 때 자동 import가 되게 하기 위해서.","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport {Link} from 'react-router-dom';\r\n//import user from '../../modules/user';\r\n\r\nconst HeaderBlock = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    background: white;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n*/\r\n\r\nconst Wrapper = styled(Responsive)`\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between; /*자식 엘리먼트 사이의 여백을 최대로*/\r\n    .logo{\r\n        font-size: 1.145rem;\r\n        font-weight: 800;\r\n        letter-spacing: 2px;\r\n    }\r\n    .right{\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    `;\r\n\r\n/**\r\n * 헤더가 fixed로 되어있기 때문에 페이지의 콘텐츠가 4rem아래에 나타나도록 해주는 컴포넌트\r\n */\r\n\r\nconst Spacer = styled.div`\r\n    height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n    font-weight: 800;\r\n    margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({user, onLogout}) => {\r\n    return(\r\n        <>\r\n        <HeaderBlock>\r\n            <Wrapper>\r\n                <Link to=\"/\" className=\"logo\">\r\n                    A SMALL DAY\r\n                </Link>\r\n                {user ? (\r\n                    <div className=\"right\">\r\n                        <UserInfo>{user.username}</UserInfo>\r\n                        <Button onClick={onLogout}>로그아웃</Button>\r\n                    </div>\r\n                ):(\r\n                    <div className='right'>\r\n                    <Button to = \"/login\">로그인</Button>\r\n                </div>\r\n            )}\r\n            </Wrapper>\r\n        </HeaderBlock>\r\n        <Spacer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n    글로벌 설정 예시: \r\n    //API 주소를 다른 곳으로 사용\r\n    //Client.defaults/baseURL = \"https://external-api-server.com/\"\r\n\r\n    //헤더 설정\r\n    //client.defaults.headers/common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n    //인터셉터 설정\r\n    axios.intercepter.response.use(\\\r\n        response => {\r\n            //요청 성공 시 특정 작업 수행\r\n            return response;\r\n        },\r\n        error => {\r\n            //요청 실패시 특정 작업 수행\r\n            return Promise.reject(error);\r\n        }\r\n    })\r\n*/\r\n\r\nexport default client;","import client from './client';\r\n\r\n//로그인\r\nexport const login = ({username, password}) => \r\nclient.post('/api/auth/login', {username, password});\r\n\r\n//회원가입\r\nexport const register = ({username, password}) => \r\nclient.post('/api/auth/register', {username, password});\r\n\r\n//로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n//로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');","import {createAction, handleActions} from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n    요청을 위한 액션 타입을 payload로 설정합니다. (예: \"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    requestType => requestType,\r\n);\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    requestType => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;","import {call, put} from 'redux-saga/effects';\r\nimport {startLoading, finishLoading} from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = type => {\r\n    const SUCCESS = `${type}_SUCCESS`;    \r\n    const FAILURE = `${type}_FAILURE`; \r\n    return [type, SUCCESS, FAILURE];   \r\n};\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;    \r\n    const FAILURE = `${type}_FAILURE`;    \r\n\r\n    return function*(action) {\r\n        yield put(startLoading(type));//로딩 시작\r\n        try{\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                meta: response, //HTTP 헤더 및 상태 코드를 쉽게 조회할 수 있다\r\n            });\r\n        }catch(e){\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true, \r\n            });\r\n        }\r\n        yield put(finishLoading(type)); //로딩 끝\r\n    };\r\n\r\n}","import {createAction, handleActions} from 'redux-actions';\r\nimport {takeLatest, call} from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER';//새로고침 이후 임시 로그인 처리\r\n//회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n    'user/CHECK',\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga(){\r\n    try{\r\n        localStorage.removeItem('user');//localStorage에서 user을 제거\r\n    }catch(e){\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\nfunction* logoutSaga(){\r\n    try{\r\n        yield call(authAPI.logout); //logout API 호출\r\n        localStorage.removeItem('user'); //localStorage에서 user를 제거\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* userSaga(){\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error,\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState,\r\n);","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  return <Header user={user} onLogout={onLogout}/>;\r\n};\r\n\r\nexport default HeaderContainer;\r\n//로그인 페이지에서 로그인 성공하면 헤더 컴포넌트에서 로그인 중인 상태를 보여주고 새로고침\r\n//해도 상태 유지되도록 하기","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${props =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: ${palette.gray[6]};\r\n  /* span 사이에 가운뎃점 문자 보여주기*/\r\n  span + span:before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n    content: '\\\\B7'; /* 가운뎃점 문자 */\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({username, publishedDate, hasMarginTop}) => {\r\n    //hasMarginTop값이 true이면 상단 여백을 주고 그렇지 않으면 여백이 없음\r\n    //username, publishedDate를 props로 받아와서 보여준다\r\n    return (\r\n        <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n          <span>\r\n            <b>\r\n              <Link to={`/@${username}`}>{username}</Link>\r\n            </b>\r\n          </span>\r\n          <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n        </SubInfoBlock>\r\n      );\r\n};\r\n\r\nexport default SubInfo;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag{\r\n      display: inline-block;\r\n      color: ${palette.cyan[7]};\r\n      text-decoration: none;\r\n      margin-right: 0.5rem;\r\n      &:hover{\r\n          color: ${palette.cyan[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tags = ({tags}) => {\r\n    return (\r\n        <TagsBlock>\r\n            {tags.map(tag => (\r\n                <Link className=\"tag\" to={`/?=${tag}`} key={tag}>\r\n                    #{tag}\r\n                </Link>\r\n            ))}\r\n        </TagsBlock>\r\n    );\r\n};\r\n\r\nexport default Tags;","//포스트들을 배열로 받아 와서 렌더링한다\r\n//사용자가 로그인 중이라면 페이지 상단 우측에 새글 작성하기 버튼을 보여 준다\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({post}) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n        <SubInfo \r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)} \r\n        />\r\n          <Tags tags={tags}/>\r\n          <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({posts, loading, error, showWriteButton}) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n  }\r\n\r\n  return (\r\n    <PostListBlock>\r\n      <WritePostButtonWrapper>\r\n          {showWriteButton &&(\r\n            <Button cyan to = \"/write\">\r\n            새 글 작성하기\r\n            </Button>\r\n          )}\r\n      </WritePostButtonWrapper>\r\n      {/* 로딩 중이 아니고 포스트 배열이 존재할 때만 보여줌 */}\r\n      {!loading && posts && (\r\n        <div>\r\n          {posts.map(post => (\r\n            <PostItem post={post} key={post._id} />\r\n          ))}\r\n      </div>\r\n      )}\r\n    </PostListBlock>\r\n  );\r\n};\r\n\r\nexport default PostList;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = id => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = id => client.delete(`/api/posts/${id}`);\r\n","//주소에 있는 쿼리 파아미터를 추출하여 listPosts API를 호출한다\r\nimport React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const { tag, username, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user}\r\n      //props를 현재 로그인 중인 사용자의 정보를 지니고 있는 user객체로 설정\r\n      //user객체가 유효할 때(사용자가 로그인 중일 때만) 포스트를 작성하는 버튼이 나타남\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {//props로 현재 선택된 계정명, 태그, 현재 페이지 숫자, 마지막 페이지 숫자를 가져옴\r\n  return (\r\n    <PaginationBlock>\r\n      {/* button을 클릭하면 props로 받아 온 값을 사용하여 이동해야할 다음경로를 설정한다 */}\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      \r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n      {/* 마지막 페이지일 땐 다음 버튼이 비활성화됨 */}\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;","//Pagination 컴포넌트를 위한 컨테이너\r\nimport React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n  const {username} = match.params;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostListContainer/>\r\n            <PaginationContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostListPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport {Link} from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n/*화면 전체를 채움*/\r\nconst AuthTemplateBlock = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: ${palette.gray[2]};\r\n\r\n    /*flex로 내부 내용 중앙 정렬*/\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    `;\r\n\r\n/*흰색 박스*/\r\nconst WhiteBox = styled.div`\r\n    .logo-area{\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({children}) => {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n                <div className=\"logo-area\">\r\n                    <Link to=\"/\">A SMALL DAY</Link>\r\n                </div>\r\n                {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default AuthTemplate;","import {createAction, handleActions} from 'redux-actions';\r\nimport produce from 'immer';\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n    'auth/REGISTER',\r\n);\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n    'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({form, key, value}) => ({\r\n        form, //register, login\r\n        key, //username, password, passwordConfirm\r\n        value, //실제 바꾸려는 값\r\n    }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);//register / login\r\n\r\nexport const register = createAction(REGISTER, ({username, password}) => ({\r\n    username,\r\n    password,\r\n}));\r\nexport const login = createAction(LOGIN, ({username, password}) => ({\r\n    username,\r\n    password,\r\n}));\r\n\r\n//사가 생성(saga)\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga(){\r\n    yield takeLatest(REGISTER, registerSaga);\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth: null,\r\n    authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, {payload: {form, key, value}}) => \r\n            produce(state, draft => {\r\n                draft[form][key] = value; //예: state.register.username을 바꾼다\r\n            }),\r\n            [INITIALIZE_FORM]: (state, {payload: form}) => ({\r\n                ...state,\r\n                [form]: initialState[form],\r\n                authError: null, //폼 전환시 회원 인증 에러 초기화\r\n            }),\r\n            //회원가입 성공\r\n            [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\r\n                ...state,\r\n                authError: null,\r\n                auth,\r\n            }),\r\n            //회원가입 실패\r\n            [REGISTER_FAILURE]: (state, {payload: error}) => ({\r\n                ...state,\r\n                authError: error,\r\n            }),\r\n            //로그인 성공\r\n            [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\r\n                ...state,\r\n                authError: null,\r\n                auth,\r\n            }),\r\n            //로그인 실패\r\n            [LOGIN_FAILURE]: (state, {payload: error}) => ({\r\n                ...state,\r\n                authError: error,\r\n            }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default auth;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여 줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n    h3{\r\n        margin: 0;\r\n        color: ${palette.gray[8]};\r\n        margin-bottom: 1rem;\r\n    }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input \r\n */\r\n\r\nconst SytledInput = styled.input`\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[5]};\r\n    padding-bottom: 0.5rem;\r\n    outline: none;\r\n    width: 100%;\r\n    &:focus {\r\n        color: $oc-teal-7;\r\n        border-bottom: 1px solid ${palette.gray[5]};\r\n    }\r\n    & + & {\r\n        margin-top: 1rem;\r\n    }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\r\n */\r\nconst Footer = styled.div`\r\n    margin-top: 2rem;\r\n    text-align: right;\r\n    a {\r\n        color: ${palette.gray[6]};\r\n        text-decoration: underline;\r\n        a:hover {\r\n            color: ${palette.gray[9]};\r\n\r\n        }\r\n    }\r\n`;\r\n\r\nconst ButtonWidthMarginTop = styled(Button)`\r\n    margin-top: 1rem;\r\n`;\r\nconst textMap = {\r\n    login: '로그인',\r\n    register: '회원가입',\r\n};\r\n\r\n/**\r\n *에러를 보여 줍니다. \r\n *\r\n*/\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-align: 0.875rem;\r\n    margin-top: 1rem;\r\n`;\r\n\r\n\r\nconst AuthForm = ({type, form, onChange, onSubmit, error}) =>{\r\n    const text = textMap[type];\r\n    return (\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <SytledInput \r\n                    autoComplete=\"username\" \r\n                    name=\"username\" \r\n                    placeholder=\"아이디\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <SytledInput\r\n                    autoComplete=\"new_password\" \r\n                    name=\"password\" \r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                {type === 'register' && (\r\n                    <SytledInput\r\n                    autoComplete=\"new-password\"\r\n                    name=\"passwordConfirm\"\r\n                    placeholder=\"비밀번호 확인\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.passwordConfirm}\r\n                    />\r\n                )}\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <ButtonWidthMarginTop cyan fullWidth style={{marginTop: '1rem'}}>\r\n                    {text}\r\n                </ButtonWidthMarginTop>\r\n                {/* <Button cyan={true} fullwidth={true}/>와 같은 의미 */}\r\n            </form>\r\n            <Footer>\r\n                {type === 'login' ? (\r\n                    <Link to=\"/register\">회원가입</Link>\r\n                ) : (\r\n                    <Link to=\"/login\">로그인</Link>\r\n                )}\r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {changeField, initializeForm, login} from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport {check} from '../../modules/user';\r\n\r\nconst LoginForm = ({history}) =>{\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }));\r\n    //input 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value\r\n            })\r\n        );\r\n    };\r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password} = form;\r\n        dispatch(login({username, password}));\r\n    };\r\n\r\n    //컴포넌트가 처음 렌더링 될 때 form을 초기화함\r\n    //이 작업을 안하면 로그인 페이지에서 값을 입력한 후 다른 페이지로 이동했다가 돌아왔\r\n    //을 때 값이 유지된 상태로 보임\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(authError){\r\n            console.log('오류 발생!');\r\n            console.log(authError);\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if(auth){\r\n            console.log('로그인 성공!');\r\n            dispatch(check());\r\n        }\r\n    },[auth, authError, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(user){\r\n            history.push('/');\r\n            try{\r\n                localStorage.setItem('user', JSON.stringify(user));//로그인 상태 유지 코드\r\n            }catch(e){\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n    return (\r\n        <AuthForm\r\n            type = \"login\"\r\n            form = {form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            // 필요한 액션을 디스패치한다\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () =>{\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm/>\r\n            {/* type이 없으면 로그인 텍스트가 안 나타남.. UserForm.js참고! */}\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeField, initializeForm, register} from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport {check} from '../../modules/user';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst RegisterForm = ({history}) =>{\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }));\r\n    //input 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value\r\n            })\r\n        );\r\n    };\r\n    //폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password, passwordConfirm} = form;\r\n        //하나라도 비어 있다면 \r\n        if([username, password, passwordConfirm].includes('')){\r\n            setError('빈 칸을 모두 입력하세요.');\r\n            return;\r\n        }\r\n        //비밀번호가 일치하지 않는다면\r\n        if(password !== passwordConfirm){\r\n            //TODO: 오류처리\r\n            setError('비밀번호가 일치하지 않습니다.');\r\n            dispatch(changeField({form: 'register', key: 'password', value: ''}));\r\n            dispatch(changeField({form: 'register', key: 'passwordConfirm', value: ''}));\r\n            return;\r\n        }\r\n        dispatch(register({username, password}));\r\n    };\r\n\r\n    //컴포넌트가 처음 렌더링 될 때 form을 초기화함\r\n    //이 작업을 안하면 로그인 페이지에서 값을 입력한 후 다른 페이지로 이동했다가 돌아왔\r\n    //을 때 값이 유지된 상태로 보임\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    //회원가입 성공/실패 처리\r\n    useEffect(() => {\r\n        if(authError){\r\n            //계정명이 존재할 때\r\n            if(authError.response.status === 409){\r\n                setError('이미 존재하는 계정명입니다.');\r\n                return;\r\n            }\r\n            //기타 이유\r\n            console.log('회원가입 실패..');\r\n            console.log(authError);\r\n            return;\r\n        }\r\n        if(auth){\r\n            console.log('회원가입 성공!!');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n    \r\n    //user값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if(user){\r\n            console.log('check API 성공!');\r\n            history.push('/'); //홈 화면으로 이동\r\n            try{\r\n                localStorage.setItem('user', JSON.stringify(user));//로그인 상태 유지 코드\r\n            }catch(e){\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n    return (\r\n        <AuthForm\r\n            type = \"register\"\r\n            form = {form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            // 필요한 액션을 디스패치한다\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","import React, { useRef, useEffect } from 'react'; \r\nimport Quill from 'quill';//Quill 라이브러리를 사용하여 구현함(글(일기)을 작성하는 에디터)\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-weight: bold;\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({title, body, onChangeField}) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '일기의 내용을 작성하세요...',\r\n      modules: {\r\n        // 더 많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고: https://quilljs.com/docs/api/#events\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {//수정 버튼 내용 초깃값\r\n    if(mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = e => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n  \r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"일기의 제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); //포스트 작성\r\n\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';//수정 버튼 클릭 시 일기쓰기 페이지로 이동하기\r\n\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post); \r\n\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n//Saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga(){\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null,\r\n  };\r\n  \r\n  const write = handleActions(\r\n    {\r\n      [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n      [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n        ...state,\r\n        [key]: value, // 특정 key 값을 업데이트\r\n      }),\r\n      [WRITE_POST]: state => ({\r\n        ...state,\r\n        //post와 PostError를 초기화\r\n        post: null,\r\n        postError: null,\r\n      }),\r\n      //포스트 작성 성공\r\n      [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n        ...state,\r\n        post, \r\n      }),\r\n      //포스트 작성 실패\r\n      [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n        ...state,\r\n        postError, \r\n      }),\r\n      [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\r\n        ...state,\r\n        title: post.title,\r\n        body: post.body,\r\n        tags: post.tags,\r\n        originalPostId: post._id,\r\n      }),\r\n      [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n        ...state,\r\n        post,\r\n      }),\r\n      [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n        ...state,\r\n        postError,\r\n      }),\r\n    },\r\n    initialState,\r\n  );\r\n  \r\n  export default write;","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\n//./write에 있는 컴포넌트 각각의 컨테이너 컨포넌트 만들기\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const { title, body } = useSelector(({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n    }));\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n      dispatch,\r\n    ]);//changeField를 useCallback로 감싸면 userErrect에서 onChangeFeild를 사용할 수 있다\r\n    // 언마운트될 때 초기화\r\n    useEffect(() => {\r\n      return () => {\r\n        dispatch(initialize());\r\n      };\r\n    }, [dispatch]);\r\n    return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n  };\r\n  \r\n  export default EditorContainer;","import React, {useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\n//태그를 추가하는 컴포넌트 이름\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]}\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({tag, onRemove}) => ( //input이 바뀔 때\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => ( //태그 목록이 바뀔 때\r\n  <TagListBlock>\r\n    {tags.map(tag => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({tags, onChangeTags}) => {//Hooks를 사용하여 태그를 추가하고 제거하는 기능을 구현\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    tag => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    tag => {\r\n      const nextTags = localTags.filter(t => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback(e => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\n//TabBox를 위한 컨테이너 컴포넌트\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const tags = useSelector(state => state.write.tags);\r\n  \r\n    const onChangeTags = nextTags => {\r\n      dispatch(\r\n        changeField({\r\n          key: 'tags',\r\n          value: nextTags,\r\n        }),\r\n      );\r\n    };\r\n  \r\n    return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n  };\r\n  \r\n  export default TagBoxContainer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백을 지정한다 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n//포스트 작성 및 취소를 할 수 있는 컴포넌트\r\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton cyan onClick={onPublish}>\r\n        일기 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;","import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n    tags: write.tags,\r\n    post: write.post,\r\n    postError: write.postError,\r\n    originalPostId: write.originalPostId,\r\n  }));\r\n\r\n  // 포스트 등록\r\n  //현재 리덕스 스토어 안에 들어 있는 값을 사용하여 새 포스트를 작성한다 \r\n  const onPublish = () => {\r\n    if(originalPostId){\r\n      dispatch(updatePost({title, body, tags, id: originalPostId}));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  //history객체를 사용하여 취소버튼을 누르면 브라우저에서 뒤로 가기 한다\r\n  //라우터가 아닌 컴포넌트에서 history객체를 사용하기 위해 widthRouter로 컴포넌트를 감싸고 컨테이너를 만듦\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패시 할 작업\r\n  useEffect(() => {\r\n    if (post) {//일기 작성에 성공하면  서버에서 응답한 포스트 정보의 \r\n        //_id와 username값을 참조하여 포스트를 읽을 수 있는 경로를 만들고\r\n        //history.push를 사용하여 경로로 이동한다\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons \r\n    onPublish={onPublish} \r\n    onCancel={onCancel} \r\n    isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);","import React from 'react';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContaner';\r\nimport {Helmet} from 'react-helmet-async';\r\n\r\nconst WritePage = () => {//일기쓰기 화면\r\n    return (\r\n        <Responsive>\r\n            <Helmet>\r\n                <title>글 작성하기 - A SMALL DAY</title>\r\n            </Helmet>\r\n            <EditorContainer/>\r\n            <TagBoxContainer/>\r\n            <WriteActionButtonsContainer/>\r\n        </Responsive>\r\n    );\r\n};\r\n\r\nexport default WritePage;","//자신의 id로 들어가서 자신이 쓴 일기를 크게 볼 수 있다.\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // UNLOAD_POST: 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport {Helmet} from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({post, error, loading, actionButtons}) => {\r\n  //actionButtons: postViewer의 PostHead 하단에서 보여줄 때 PostViewer에서 렌더링하면\r\n  //무조건 PostViewer을 거쳐야해서 불편함\r\n  //따라서 JSX형태로 받아 렌더링 하는 방법이 편하다 // 수정/삭제 버튼\r\n\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <Helmet>\r\n        <title>{title} - A SMALL DAY</title>\r\n      </Helmet>\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfo \r\n          username={user.username} \r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags}/>\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: body}} />\r\n      {/* dangerouslySetInnerHTML으로 HTML을 적용해줄수 있다 */}\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;","//포스트를 삭제할 때 사용자에게 한 번 더확인을 요청하기 위한 modal 창 \r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  onConfirm,\r\n  onCancel,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"일기 삭제\"\r\n      description=\"일기를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;","import React, {useState, useCallback} from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.cyan[7]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove })  => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton> \r\n        {/* 수정 버튼을 누르면 글쓰기 페이지로 이동함 */}\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        conCancel={onCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';//URL 파라미터로 받아 온 id값을 조회하는데 필요\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';// 수정/삭제 버튼\r\nimport {setOriginalPost} from '../../modules/write';//수정 버튼 클릭시 글쓰기 페이지로 이동\r\nimport {removePost} from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history}) => {//PostViewer를 위한 컨테이너 컴포넌트\r\n    // 처음 마운트될 때 포스트 읽기 API 요청\r\n    const { postId } = match.params;\r\n    const dispatch = useDispatch();\r\n    const { post, error, loading, user} = useSelector(({ post, loading, user }) => ({\r\n        post: post.post,\r\n        error: post.error,\r\n        loading: loading['post/READ_POST'],\r\n        user: user.user,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(readPost(postId));\r\n        // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n        return () => {\r\n          dispatch(unloadPost());\r\n        };\r\n    }, [dispatch, postId]);\r\n\r\n    const onEdit = () => {\r\n      dispatch(setOriginalPost(post));\r\n      history.push('/write');\r\n    };\r\n\r\n    const onRemove = async () => {\r\n      try{\r\n        await removePost(postId);\r\n        history.push('/');// 홈으로 이동\r\n      }catch(e){\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    const ownPost = (user && user._id) === (post && post.user._id); \r\n    //현재 사용자가 보고 있는 포스트가 자신의 포스트일 때만 PostActionButtons가 나타남\r\n\r\n    return (\r\n      <PostViewer\r\n      post = {post} \r\n      loading={loading} \r\n      error={error}\r\n      actionButtons={ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\r\n      />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostViewerContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostPage;","//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Route } from 'react-router';\nimport {Helmet} from 'react-helmet-async';\n\nfunction App() {\n  return (\n    <>\n    <Helmet>\n      <title>A SMALL DAY</title>\n    </Helmet>\n    <Route component={PostListPage} path={['/@:username', '/']} exact />\n    {/* 배열을 넣어서 한 라우트 컴포넌트에 여러 개 경로를 쉽게 설정가능함 */}\n    {/* @:username - 사용자의 아이디를 username파라미터로 읽을 수 있게 한다 */}\n    <Route component={LoginPage} path=\"/login\" />\n    <Route component={RegisterPage} path=\"/register\" />\n    <Route component={WritePage} path=\"/write\" />\n    <Route component={PostPage} path=\"/@:username/:postId\" />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from 'redux';\r\nimport {all} from 'redux-saga/effects';\r\nimport auth, {authSaga} from './auth';\r\nimport loading from './loading';\r\nimport user, {userSaga} from './user';\r\nimport write, {writeSaga} from './write';\r\nimport post, {postSaga} from './post';\r\nimport posts, {postsSaga} from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    write,\r\n    post,\r\n    posts\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, {rootSaga} from './modules';\nimport {tempSetUser, check} from './modules/user';\nimport {HelmetProvider} from 'react-helmet-async';//meta 태그를 리액트 앱에서 설정하기\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer, \n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser(){\n  try{\n    const user = localStorage.getItem('user');\n    if(!user) return;//로그인 상태가 아니라면 아무것도 안 함\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  }catch(e){\n    console.log('localStorage is not wroking');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}